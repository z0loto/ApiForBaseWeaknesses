using System.Text.Json;
using ApiForBaseWeaknesses.Dto;
using ApiForBaseWeaknesses.Services;
using Microsoft.AspNetCore.Mvc;
using ApiForBaseWeaknesses.Models;
namespace ApiForBaseWeaknesses.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class ImportVulnerabilityController : ControllerBase
    {
        private readonly ILogger<ImportVulnerabilityController> _logger;
        private readonly BaseService _baseservice;
        private readonly AppDbContext _context;
        public ImportVulnerabilityController(ILogger<ImportVulnerabilityController> logger, BaseService baseservice, AppDbContext context)
        {
            _logger = logger;
            _baseservice = baseservice;
            _context = context;
        }
        [HttpPost("upload")]
        public async Task<IActionResult> Upload(IFormFile? file)
        {
            if (file == null || file.Length == 0)
                return BadRequest("Файл не передан");
            string json;
            using (var reader = new StreamReader(file.OpenReadStream()))
            {
                json = await reader.ReadToEndAsync();
            }
            // Настройка опций для camelCase, для решения проблемы заглавных букв
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
            MainDto response = JsonSerializer.Deserialize<MainDto>(json, options);
            if (response != null)
            {
                List<Vulnerability> finalmodel = Mapping.Mapping.MapToListVulnerability(response);
                _context.Vulnerabilitys.AddRange(finalmodel);
                _context.SaveChanges();
            }
            return Ok("Успешный успех");
        }
    }
}
